next structure proposal
=======================

this outlines a possible setup with very strong module granularity. note that the js/ folder was renamed in app/ and the files from the view/ folder have moved to the subfolders of the modules they would belong to.

some parts are still unclear. like what purpose the core module actually has, if start and about views couldn't better fit into meta or even layout. shouldn't squidStatementTable rather be part of layout as well? or would data make more sense in core instead of an own module (or the other way round)? is bundling utils i18n with the angular-translate parts into their own module sensible? can util be broken down further?

to me it seems like finer granularity also makes it less obvious for some components where they belong.

src/
	app/
		app.module.js // pulls together all the modules that make up the app
		build.options.js
		dist.min.js
		main.js 
		core/
			about.view.html
			core.module.js  // the heart of the apps functionality (mostly what former app module was about)
			start.view.html
		browse/
			arguments.service.js
			browse.controller.js
			browse.module.js
			browse.view.html
		data/
			classes.service.js
			data.module.js
			properties.service.js
		layout/
			layout.controller.js
			layout.directives.js
			layout.view.html
			squidImage.tpl.html
			squdFooter.tpl.hmtl
		meta/
			datatypes.view.html // not implemented
			meta.module.js
			statistics.service.js
			statistics.controller.js
			status.view.html
		query/
			query.view.html
			query.module.js
			queryInterface.controller.js
			queryInterface.service.js
		i18n/
			i18n.module.js
			i18n.service.js
			location.service.js // (?) something to keep track of lang param in url etc.?
			translate.config.js
		util/
			util.module.js
			squidCompile.directive.js
			squidStatementTable.directive.js
			dataFormatter.service.js
			entitydata.service.js
			pagination.controller.js
			sparql.service.js
			wikidataapi.service.js
		view/
			view.view.html
			view.js
			view.controller.js
			view.service.js

	data/ ...
	img/ ...
	lang/ ...
	lib/ ...
	angucomplete-alt.css 
	index.html
	style.css


////////////////////////////////////////////////////////////////////////////
// app.js basically bundles up the apps modules in a manifest like fashion:
angular.module('sqid', [

	// core logic and APIs
	'core', 	// gluing the most basic parts together
	'i18n', 	// internationalization of messages and labels
	'data',		// the generated data from our json files
	'layout',	// manage the main layout, header, navbar, etc.
	'util',		// all kinds of stuff?
	
	// feature modules
	'meta',		// statistics, pages about the page
	'browse',	// Properties and Classes browser
	'view',		// Propertiy and Class viewer
	'query'		// sparql abstraction wrapper
]);
//////////////////////////////////////////////////////////////////////////////


============================
documentation of refactoring
(what happened so far:)
============================


branch refactor introduces following changes: (I try to make this list exhaustive but no gurantees)

~~~~~~~~~~~~~~~~~~~~
src/js/:
	main.js adapted require loading, cleaned up shim config

	app/
		../app.js moved to app.js
		../statController.js moved to statistics.js, now contains 'statistics' factory from former app.js
		../tableController.js moved to browse.js
		../viewController.js moved to view.js
		created file translate.js, contains $translateProvider from former app.js
		created file properties.js, contains 'Properties' factory from fomer app.js 
		created file classes.js, contains 'Classes' factory from former app.js
	
	util/
		../util.js moved to util.js
		../paginationController.js moved to pagination.js
		created file i18n.js, contains 'i18n' factory from former util.js 
		created file sparql.js, contains 'sparql' factory from former util.js
		created file wikidataapi.js, contains 'wikidataapi' factory from former util.js 
		created file entitydata.js, contains 'entitydata' factory from former util.js
		created file dataFormatter.js, contains 'dataFormatter' factory from former util.js
		created file directives.js, contains 'qidImage', 'squidFooter', 'sqidCompile' and 'sqidStatementTable' directives from former util.js 

	query/
		../queryInterface.js moved to query.js
~~~~~~~~~~~~~~~


wrapped all individual files in module definitions, so most of the requirejs shim config can be ditched


i18n/translate
--------------
introduced new global dependencies: 
	ngCookies,
	translate-storage-cookie/local extensions (for remembering user lang choice)
	translate-loader-static-files for async language file loading

moved translation tables out of app/translate.js into lang/<key>.json (now need to be valid json syntax)

!issue: 
	I gave up on making dependency inference work with the angular-translate extensions. in the compiled bundle for some reason the extensions would always execute before the angular-translate, failing for the lack of an yet undefined module "pascalprecht.translate".
	just explicitly listing them in the right order in the requirejs call of main.js solves this problem luckily 